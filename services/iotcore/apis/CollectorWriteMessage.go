// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CollectorWriteMessageRequest struct {

    core.JDCloudRequest

    /* Hub实例Id  */
    InstanceId string `json:"instanceId"`

    /* 区域Id  */
    RegionId string `json:"regionId"`

    /* 当前的链接码 (Optional) */
    Identifier *string `json:"identifier"`

    /* 当前的协议类型 (Optional) */
    Protocol *string `json:"protocol"`

    /* 当前待写入的数据 (Optional) */
    Data *interface{} `json:"data"`
}

/*
 * param instanceId: Hub实例Id (Required)
 * param regionId: 区域Id (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCollectorWriteMessageRequest(
    instanceId string,
    regionId string,
) *CollectorWriteMessageRequest {

	return &CollectorWriteMessageRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/writeCollectorProperty",
			Method:  "POST",
			Header:  nil,
			Version: "v2",
		},
        InstanceId: instanceId,
        RegionId: regionId,
	}
}

/*
 * param instanceId: Hub实例Id (Required)
 * param regionId: 区域Id (Required)
 * param identifier: 当前的链接码 (Optional)
 * param protocol: 当前的协议类型 (Optional)
 * param data: 当前待写入的数据 (Optional)
 */
func NewCollectorWriteMessageRequestWithAllParams(
    instanceId string,
    regionId string,
    identifier *string,
    protocol *string,
    data *interface{},
) *CollectorWriteMessageRequest {

    return &CollectorWriteMessageRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/writeCollectorProperty",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
        InstanceId: instanceId,
        RegionId: regionId,
        Identifier: identifier,
        Protocol: protocol,
        Data: data,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCollectorWriteMessageRequestWithoutParam() *CollectorWriteMessageRequest {

    return &CollectorWriteMessageRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/regions/{regionId}/loongrayinstances/{instanceId}/writeCollectorProperty",
            Method:  "POST",
            Header:  nil,
            Version: "v2",
        },
    }
}

/* param instanceId: Hub实例Id(Required) */
func (r *CollectorWriteMessageRequest) SetInstanceId(instanceId string) {
    r.InstanceId = instanceId
}

/* param regionId: 区域Id(Required) */
func (r *CollectorWriteMessageRequest) SetRegionId(regionId string) {
    r.RegionId = regionId
}

/* param identifier: 当前的链接码(Optional) */
func (r *CollectorWriteMessageRequest) SetIdentifier(identifier string) {
    r.Identifier = &identifier
}

/* param protocol: 当前的协议类型(Optional) */
func (r *CollectorWriteMessageRequest) SetProtocol(protocol string) {
    r.Protocol = &protocol
}

/* param data: 当前待写入的数据(Optional) */
func (r *CollectorWriteMessageRequest) SetData(data interface{}) {
    r.Data = &data
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CollectorWriteMessageRequest) GetRegionId() string {
    return r.RegionId
}

type CollectorWriteMessageResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CollectorWriteMessageResult `json:"result"`
}

type CollectorWriteMessageResult struct {
}