// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    cdn "github.com/jdcloud-api/jdcloud-sdk-go/services/cdn/models"
)

type CreateLiveDomainRequest struct {

    core.JDCloudRequest

    /* 播放域名（仅siteType=1且publishDomain不为空时可为空） (Optional) */
    PlayDomain *string `json:"playDomain"`

    /* 推流域名（siteType=push时playDomain与publishDomain不能同时传入） (Optional) */
    PublishDomain *string `json:"publishDomain"`

    /* 回源类型只能是[ips,domain]中的一种 (Optional) */
    SourceType *string `json:"sourceType"`

    /*  (Optional) */
    BackHttpType *string `json:"backHttpType"`

    /* 默认回源host (Optional) */
    DefaultSourceHost *string `json:"defaultSourceHost"`

    /* 站点类型1:push(推流模式),2:pull(拉流模式),3:mix(混合模式) (Optional) */
    SiteType *string `json:"siteType"`

    /* 回源类型，支持rtmp, http-flv, https-flv, http-hls,https-hls，默认rtmp (Optional) */
    BackSourceType *string `json:"backSourceType"`

    /* 播放协议，默认为rtmp,hdl,hls全选 (Optional) */
    PlayProtocol []string `json:"playProtocol"`

    /* 转推地址 (Optional) */
    ForwardCustomVhost *string `json:"forwardCustomVhost"`

    /* 回源IP信息 (Optional) */
    IpSource []cdn.IpSourceInfo `json:"ipSource"`

    /* 回源域名信息 (Optional) */
    DomainSource []cdn.DomainSourceInfo `json:"domainSource"`

    /* 默认为H.264 (Optional) */
    VideoType *string `json:"videoType"`

    /* 默认为AAC (Optional) */
    AudioType *string `json:"audioType"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateLiveDomainRequest(
) *CreateLiveDomainRequest {

	return &CreateLiveDomainRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/liveDomain",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param playDomain: 播放域名（仅siteType=1且publishDomain不为空时可为空） (Optional)
 * param publishDomain: 推流域名（siteType=push时playDomain与publishDomain不能同时传入） (Optional)
 * param sourceType: 回源类型只能是[ips,domain]中的一种 (Optional)
 * param backHttpType:  (Optional)
 * param defaultSourceHost: 默认回源host (Optional)
 * param siteType: 站点类型1:push(推流模式),2:pull(拉流模式),3:mix(混合模式) (Optional)
 * param backSourceType: 回源类型，支持rtmp, http-flv, https-flv, http-hls,https-hls，默认rtmp (Optional)
 * param playProtocol: 播放协议，默认为rtmp,hdl,hls全选 (Optional)
 * param forwardCustomVhost: 转推地址 (Optional)
 * param ipSource: 回源IP信息 (Optional)
 * param domainSource: 回源域名信息 (Optional)
 * param videoType: 默认为H.264 (Optional)
 * param audioType: 默认为AAC (Optional)
 */
func NewCreateLiveDomainRequestWithAllParams(
    playDomain *string,
    publishDomain *string,
    sourceType *string,
    backHttpType *string,
    defaultSourceHost *string,
    siteType *string,
    backSourceType *string,
    playProtocol []string,
    forwardCustomVhost *string,
    ipSource []cdn.IpSourceInfo,
    domainSource []cdn.DomainSourceInfo,
    videoType *string,
    audioType *string,
) *CreateLiveDomainRequest {

    return &CreateLiveDomainRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        PlayDomain: playDomain,
        PublishDomain: publishDomain,
        SourceType: sourceType,
        BackHttpType: backHttpType,
        DefaultSourceHost: defaultSourceHost,
        SiteType: siteType,
        BackSourceType: backSourceType,
        PlayProtocol: playProtocol,
        ForwardCustomVhost: forwardCustomVhost,
        IpSource: ipSource,
        DomainSource: domainSource,
        VideoType: videoType,
        AudioType: audioType,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateLiveDomainRequestWithoutParam() *CreateLiveDomainRequest {

    return &CreateLiveDomainRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/liveDomain",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param playDomain: 播放域名（仅siteType=1且publishDomain不为空时可为空）(Optional) */
func (r *CreateLiveDomainRequest) SetPlayDomain(playDomain string) {
    r.PlayDomain = &playDomain
}

/* param publishDomain: 推流域名（siteType=push时playDomain与publishDomain不能同时传入）(Optional) */
func (r *CreateLiveDomainRequest) SetPublishDomain(publishDomain string) {
    r.PublishDomain = &publishDomain
}

/* param sourceType: 回源类型只能是[ips,domain]中的一种(Optional) */
func (r *CreateLiveDomainRequest) SetSourceType(sourceType string) {
    r.SourceType = &sourceType
}

/* param backHttpType: (Optional) */
func (r *CreateLiveDomainRequest) SetBackHttpType(backHttpType string) {
    r.BackHttpType = &backHttpType
}

/* param defaultSourceHost: 默认回源host(Optional) */
func (r *CreateLiveDomainRequest) SetDefaultSourceHost(defaultSourceHost string) {
    r.DefaultSourceHost = &defaultSourceHost
}

/* param siteType: 站点类型1:push(推流模式),2:pull(拉流模式),3:mix(混合模式)(Optional) */
func (r *CreateLiveDomainRequest) SetSiteType(siteType string) {
    r.SiteType = &siteType
}

/* param backSourceType: 回源类型，支持rtmp, http-flv, https-flv, http-hls,https-hls，默认rtmp(Optional) */
func (r *CreateLiveDomainRequest) SetBackSourceType(backSourceType string) {
    r.BackSourceType = &backSourceType
}

/* param playProtocol: 播放协议，默认为rtmp,hdl,hls全选(Optional) */
func (r *CreateLiveDomainRequest) SetPlayProtocol(playProtocol []string) {
    r.PlayProtocol = playProtocol
}

/* param forwardCustomVhost: 转推地址(Optional) */
func (r *CreateLiveDomainRequest) SetForwardCustomVhost(forwardCustomVhost string) {
    r.ForwardCustomVhost = &forwardCustomVhost
}

/* param ipSource: 回源IP信息(Optional) */
func (r *CreateLiveDomainRequest) SetIpSource(ipSource []cdn.IpSourceInfo) {
    r.IpSource = ipSource
}

/* param domainSource: 回源域名信息(Optional) */
func (r *CreateLiveDomainRequest) SetDomainSource(domainSource []cdn.DomainSourceInfo) {
    r.DomainSource = domainSource
}

/* param videoType: 默认为H.264(Optional) */
func (r *CreateLiveDomainRequest) SetVideoType(videoType string) {
    r.VideoType = &videoType
}

/* param audioType: 默认为AAC(Optional) */
func (r *CreateLiveDomainRequest) SetAudioType(audioType string) {
    r.AudioType = &audioType
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateLiveDomainRequest) GetRegionId() string {
    return ""
}

type CreateLiveDomainResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateLiveDomainResult `json:"result"`
}

type CreateLiveDomainResult struct {
}