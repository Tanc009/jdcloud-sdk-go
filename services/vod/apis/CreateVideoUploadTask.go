// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type CreateVideoUploadTaskRequest struct {

    core.JDCloudRequest

    /* HTTP 请求方法，取值范围：GET、POST、PUT、DELETE、HEAD、PATCH，默认值为 PUT (Optional) */
    HttpMethod *string `json:"httpMethod"`

    /* 视频标题 (Optional) */
    Title *string `json:"title"`

    /* 文件名称 (Optional) */
    FileName *string `json:"fileName"`

    /* 文件大小 (Optional) */
    FileSize *int64 `json:"fileSize"`

    /* 封面地址 (Optional) */
    CoverUrl *string `json:"coverUrl"`

    /* 视频描述 (Optional) */
    Description *string `json:"description"`

    /* 分类ID (Optional) */
    CategoryId *int64 `json:"categoryId"`

    /* 视频标签集合 (Optional) */
    Tags []string `json:"tags"`

    /* 转码模板ID集合 (Optional) */
    TranscodeTemplateIds []int64 `json:"transcodeTemplateIds"`

    /* 水印ID集合 (Optional) */
    WatermarkIds []int64 `json:"watermarkIds"`
}

/*
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewCreateVideoUploadTaskRequest(
) *CreateVideoUploadTaskRequest {

	return &CreateVideoUploadTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/videoUploadTask",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
	}
}

/*
 * param httpMethod: HTTP 请求方法，取值范围：GET、POST、PUT、DELETE、HEAD、PATCH，默认值为 PUT (Optional)
 * param title: 视频标题 (Optional)
 * param fileName: 文件名称 (Optional)
 * param fileSize: 文件大小 (Optional)
 * param coverUrl: 封面地址 (Optional)
 * param description: 视频描述 (Optional)
 * param categoryId: 分类ID (Optional)
 * param tags: 视频标签集合 (Optional)
 * param transcodeTemplateIds: 转码模板ID集合 (Optional)
 * param watermarkIds: 水印ID集合 (Optional)
 */
func NewCreateVideoUploadTaskRequestWithAllParams(
    httpMethod *string,
    title *string,
    fileName *string,
    fileSize *int64,
    coverUrl *string,
    description *string,
    categoryId *int64,
    tags []string,
    transcodeTemplateIds []int64,
    watermarkIds []int64,
) *CreateVideoUploadTaskRequest {

    return &CreateVideoUploadTaskRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/videoUploadTask",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        HttpMethod: httpMethod,
        Title: title,
        FileName: fileName,
        FileSize: fileSize,
        CoverUrl: coverUrl,
        Description: description,
        CategoryId: categoryId,
        Tags: tags,
        TranscodeTemplateIds: transcodeTemplateIds,
        WatermarkIds: watermarkIds,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewCreateVideoUploadTaskRequestWithoutParam() *CreateVideoUploadTaskRequest {

    return &CreateVideoUploadTaskRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/videoUploadTask",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param httpMethod: HTTP 请求方法，取值范围：GET、POST、PUT、DELETE、HEAD、PATCH，默认值为 PUT(Optional) */
func (r *CreateVideoUploadTaskRequest) SetHttpMethod(httpMethod string) {
    r.HttpMethod = &httpMethod
}

/* param title: 视频标题(Optional) */
func (r *CreateVideoUploadTaskRequest) SetTitle(title string) {
    r.Title = &title
}

/* param fileName: 文件名称(Optional) */
func (r *CreateVideoUploadTaskRequest) SetFileName(fileName string) {
    r.FileName = &fileName
}

/* param fileSize: 文件大小(Optional) */
func (r *CreateVideoUploadTaskRequest) SetFileSize(fileSize int64) {
    r.FileSize = &fileSize
}

/* param coverUrl: 封面地址(Optional) */
func (r *CreateVideoUploadTaskRequest) SetCoverUrl(coverUrl string) {
    r.CoverUrl = &coverUrl
}

/* param description: 视频描述(Optional) */
func (r *CreateVideoUploadTaskRequest) SetDescription(description string) {
    r.Description = &description
}

/* param categoryId: 分类ID(Optional) */
func (r *CreateVideoUploadTaskRequest) SetCategoryId(categoryId int64) {
    r.CategoryId = &categoryId
}

/* param tags: 视频标签集合(Optional) */
func (r *CreateVideoUploadTaskRequest) SetTags(tags []string) {
    r.Tags = tags
}

/* param transcodeTemplateIds: 转码模板ID集合(Optional) */
func (r *CreateVideoUploadTaskRequest) SetTranscodeTemplateIds(transcodeTemplateIds []int64) {
    r.TranscodeTemplateIds = transcodeTemplateIds
}

/* param watermarkIds: 水印ID集合(Optional) */
func (r *CreateVideoUploadTaskRequest) SetWatermarkIds(watermarkIds []int64) {
    r.WatermarkIds = watermarkIds
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r CreateVideoUploadTaskRequest) GetRegionId() string {
    return ""
}

type CreateVideoUploadTaskResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result CreateVideoUploadTaskResult `json:"result"`
}

type CreateVideoUploadTaskResult struct {
    VideoId string `json:"videoId"`
    UploadUrl string `json:"uploadUrl"`
}