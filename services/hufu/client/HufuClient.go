// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    hufu "github.com/jdcloud-api/jdcloud-sdk-go/services/hufu/apis"
    "encoding/json"
    "errors"
)

type HufuClient struct {
    core.JDCloudClient
}

func NewHufuClient(credential *core.Credential) *HufuClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("hufu.jdcloud-api.com")

    return &HufuClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "hufu",
            Revision:    "1.0.2",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *HufuClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *HufuClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *HufuClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 加密 */
func (c *HufuClient) Encrypt(request *hufu.EncryptRequest) (*hufu.EncryptResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufu.EncryptResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 下游更新路由信息 */
func (c *HufuClient) ModifyRouterByLower(request *hufu.ModifyRouterByLowerRequest) (*hufu.ModifyRouterByLowerResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufu.ModifyRouterByLowerResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询api列表 */
func (c *HufuClient) QueryApis(request *hufu.QueryApisRequest) (*hufu.QueryApisResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &hufu.QueryApisResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

