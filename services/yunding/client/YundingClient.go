// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    yunding "github.com/jdcloud-api/jdcloud-sdk-go/services/yunding/apis"
    "encoding/json"
    "errors"
)

type YundingClient struct {
    core.JDCloudClient
}

func NewYundingClient(credential *core.Credential) *YundingClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("yunding.jdcloud-api.com")

    return &YundingClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "yunding",
            Revision:    "2.0.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *YundingClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *YundingClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *YundingClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 从RDS实例中删除数据库。为便于管理和数据恢复，RDS对用户权限进行了控制，用户仅能通过控制台或本接口删除数据库 [MFA enabled] */
func (c *YundingClient) DeleteRdsDatabase(request *yunding.DeleteRdsDatabaseRequest) (*yunding.DeleteRdsDatabaseResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &yunding.DeleteRdsDatabaseResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 删除按配置计费、或包年包月已到期的单个云主机。不能删除没有计费信息的云主机。<br>
云主机状态必须为运行<b>running</b>、停止<b>stopped</b>、错误<b>error</b>，同时云主机没有正在进行中的任务才可删除。<br>
如果主机中挂载的数据盘为按配置计费的云硬盘且AutoDelete属性为true，那么数据盘会随主机一起删除。
 [MFA enabled] */
func (c *YundingClient) DeleteVmInstance(request *yunding.DeleteVmInstanceRequest) (*yunding.DeleteVmInstanceResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &yunding.DeleteVmInstanceResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 给网卡删除secondaryIp接口 */
func (c *YundingClient) UnassignSecondaryIps(request *yunding.UnassignSecondaryIpsRequest) (*yunding.UnassignSecondaryIpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &yunding.UnassignSecondaryIpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 给网卡分配secondaryIp接口 */
func (c *YundingClient) AssignSecondaryIps(request *yunding.AssignSecondaryIpsRequest) (*yunding.AssignSecondaryIpsResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &yunding.AssignSecondaryIpsResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

