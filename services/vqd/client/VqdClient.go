// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package client

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
    vqd "github.com/jdcloud-api/jdcloud-sdk-go/services/vqd/apis"
    "encoding/json"
    "errors"
)

type VqdClient struct {
    core.JDCloudClient
}

func NewVqdClient(credential *core.Credential) *VqdClient {
    if credential == nil {
        return nil
    }

    config := core.NewConfig()
    config.SetEndpoint("vqd.jdcloud-api.com")

    return &VqdClient{
        core.JDCloudClient{
            Credential:  *credential,
            Config:      *config,
            ServiceName: "vqd",
            Revision:    "0.1.0",
            Logger:      core.NewDefaultLogger(core.LogInfo),
        }}
}

func (c *VqdClient) SetConfig(config *core.Config) {
    c.Config = *config
}

func (c *VqdClient) SetLogger(logger core.Logger) {
    c.Logger = logger
}

func (c *VqdClient) DisableLogger() {
    c.Logger = core.NewDummyLogger()
}

/* 设置回调配置 */
func (c *VqdClient) SetCallback(request *vqd.SetCallbackRequest) (*vqd.SetCallbackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &vqd.SetCallbackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 查询回调配置 */
func (c *VqdClient) QueryCallback(request *vqd.QueryCallbackRequest) (*vqd.QueryCallbackResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &vqd.QueryCallbackResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量提交视频质检任务，一次同时最多提交50个输入媒体 */
func (c *VqdClient) BatchSubmitVqdTasks(request *vqd.BatchSubmitVqdTasksRequest) (*vqd.BatchSubmitVqdTasksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &vqd.BatchSubmitVqdTasksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

/* 批量删除视频质检任务。删除任务时，会同时删除任务相关的数据，如任务执行结果等。一次最多删除50条 */
func (c *VqdClient) BatchDeleteVqdTasks(request *vqd.BatchDeleteVqdTasksRequest) (*vqd.BatchDeleteVqdTasksResponse, error) {
    if request == nil {
        return nil, errors.New("Request object is nil. ")
    }
    resp, err := c.Send(request, c.ServiceName)
    if err != nil {
        return nil, err
    }

    jdResp := &vqd.BatchDeleteVqdTasksResponse{}
    err = json.Unmarshal(resp, jdResp)
    if err != nil {
        c.Logger.Log(core.LogError, "Unmarshal json failed, resp: %s", string(resp))
        return nil, err
    }

    return jdResp, err
}

