// Copyright 2018 JDCLOUD.COM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// NOTE: This class is auto generated by the jdcloud code generator program.

package apis

import (
    "github.com/jdcloud-api/jdcloud-sdk-go/core"
)

type ModuleEnrollRequest struct {

    core.JDCloudRequest

    /* 边缘计算节点编号  */
    EdgeId string `json:"edgeId"`

    /* 待添加的设备编号 (Optional) */
    DeviceId *string `json:"deviceId"`

    /* 边缘计算模块名称 (Optional) */
    ModuleId *string `json:"moduleId"`

    /* 边缘计算模块类型编号 (Optional) */
    ModuleTypeId *string `json:"moduleTypeId"`

    /* 边缘计算模块配置编号 (Optional) */
    ModuleConfId *string `json:"moduleConfId"`

    /* 是否立即部署[0-立即部署,1-暂不部署] (Optional) */
    IsDeploy *int `json:"isDeploy"`
}

/*
 * param edgeId: 边缘计算节点编号 (Required)
 *
 * @Deprecated, not compatible when mandatory parameters changed
 */
func NewModuleEnrollRequest(
    edgeId string,
) *ModuleEnrollRequest {

	return &ModuleEnrollRequest{
        JDCloudRequest: core.JDCloudRequest{
			URL:     "/edge/{edgeId}/module:enroll",
			Method:  "POST",
			Header:  nil,
			Version: "v1",
		},
        EdgeId: edgeId,
	}
}

/*
 * param edgeId: 边缘计算节点编号 (Required)
 * param deviceId: 待添加的设备编号 (Optional)
 * param moduleId: 边缘计算模块名称 (Optional)
 * param moduleTypeId: 边缘计算模块类型编号 (Optional)
 * param moduleConfId: 边缘计算模块配置编号 (Optional)
 * param isDeploy: 是否立即部署[0-立即部署,1-暂不部署] (Optional)
 */
func NewModuleEnrollRequestWithAllParams(
    edgeId string,
    deviceId *string,
    moduleId *string,
    moduleTypeId *string,
    moduleConfId *string,
    isDeploy *int,
) *ModuleEnrollRequest {

    return &ModuleEnrollRequest{
        JDCloudRequest: core.JDCloudRequest{
            URL:     "/edge/{edgeId}/module:enroll",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
        EdgeId: edgeId,
        DeviceId: deviceId,
        ModuleId: moduleId,
        ModuleTypeId: moduleTypeId,
        ModuleConfId: moduleConfId,
        IsDeploy: isDeploy,
    }
}

/* This constructor has better compatible ability when API parameters changed */
func NewModuleEnrollRequestWithoutParam() *ModuleEnrollRequest {

    return &ModuleEnrollRequest{
            JDCloudRequest: core.JDCloudRequest{
            URL:     "/edge/{edgeId}/module:enroll",
            Method:  "POST",
            Header:  nil,
            Version: "v1",
        },
    }
}

/* param edgeId: 边缘计算节点编号(Required) */
func (r *ModuleEnrollRequest) SetEdgeId(edgeId string) {
    r.EdgeId = edgeId
}

/* param deviceId: 待添加的设备编号(Optional) */
func (r *ModuleEnrollRequest) SetDeviceId(deviceId string) {
    r.DeviceId = &deviceId
}

/* param moduleId: 边缘计算模块名称(Optional) */
func (r *ModuleEnrollRequest) SetModuleId(moduleId string) {
    r.ModuleId = &moduleId
}

/* param moduleTypeId: 边缘计算模块类型编号(Optional) */
func (r *ModuleEnrollRequest) SetModuleTypeId(moduleTypeId string) {
    r.ModuleTypeId = &moduleTypeId
}

/* param moduleConfId: 边缘计算模块配置编号(Optional) */
func (r *ModuleEnrollRequest) SetModuleConfId(moduleConfId string) {
    r.ModuleConfId = &moduleConfId
}

/* param isDeploy: 是否立即部署[0-立即部署,1-暂不部署](Optional) */
func (r *ModuleEnrollRequest) SetIsDeploy(isDeploy int) {
    r.IsDeploy = &isDeploy
}

// GetRegionId returns path parameter 'regionId' if exist,
// otherwise return empty string
func (r ModuleEnrollRequest) GetRegionId() string {
    return ""
}

type ModuleEnrollResponse struct {
    RequestID string `json:"requestId"`
    Error core.ErrorResponse `json:"error"`
    Result ModuleEnrollResult `json:"result"`
}

type ModuleEnrollResult struct {
}